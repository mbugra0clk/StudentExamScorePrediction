{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPop/zNTSXeLiQ5WCT1qD7V"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"PyGnOGFqmsnT"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, BatchNormalization, Dropout\n","from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.preprocessing import StandardScaler\n","\n","\n","data = df_merged\n","\n","# Veri setinden kolonları al\n","columns = data.columns[:-1].tolist()  # Son kolonun hedef değişken olduğu varsayımı\n","target_column = data.columns[-1]  # Son kolon hedef değişken\n","\n","# Mapping değerleri\n","mapping = {\n","    \"Low\": 0, \"Medium\": 1, \"High\": 2,\n","    \"Poor\": 0, \"Average\": 1, \"Good\": 2,\n","    \"Yes\": 1, \"No\": 0,\n","    \"Public\": 0, \"Private\": 1,\n","    \"Short\": 0, \"Medium\": 1, \"Long\": 2,\n","    \"Male\": 0, \"Female\": 1\n","}\n","\n","# Dinamik kullanıcı girdileri alma fonksiyonu\n","def get_user_input_dynamically(columns, target_column):\n","    user_data = {}\n","    print(\"\\nÖzelliklerden hangilerine giriş yapmak istediğinizi seçin.\")\n","    print(\"Seçilebilecek kolonlar:\")\n","    for i, col in enumerate(columns, 1):\n","        print(f\"{i}. {col}\")\n","\n","    # Kullanıcıdan kolon seçimi al\n","    selected_indices = input(\"\\nSeçmek istediğiniz kolonların numaralarını virgülle ayırarak yazın (örneğin: 1,3,5): \").strip()\n","    selected_indices = [int(idx.strip()) - 1 for idx in selected_indices.split(\",\") if idx.strip().isdigit()]\n","\n","    selected_columns = [columns[i] for i in selected_indices if 0 <= i < len(columns)]\n","    print(f\"\\nSeçilen kolonlar: {selected_columns}\")\n","\n","    # Sadece seçilen kolonlar için giriş al\n","    for col in selected_columns:\n","        value = input(f\"{col}: \").strip()\n","        try:\n","            user_data[col] = float(value)  # Sayısal bir girişse dönüştür\n","        except ValueError:\n","            user_data[col] = mapping.get(value.capitalize(), 0)  # Haritalama yap veya varsayılan 0\n","\n","    # Diğer kolonlar için varsayılan değer ekle\n","    for col in columns:\n","        if col not in selected_columns:\n","            user_data[col] = 0  # Varsayılan değer\n","\n","    # Hedef değişken için giriş al\n","    target_value = float(input(f\"{target_column} (etiket değeri): \"))\n","    user_data[target_column] = target_value\n","    return user_data\n","\n","# Model tanımlama\n","def create_model(input_dim):\n","    model = Sequential([\n","        Dense(512, activation='relu', input_shape=(input_dim,)),\n","        BatchNormalization(),\n","        Dropout(0.5),\n","        Dense(256, activation='relu'),\n","        BatchNormalization(),\n","        Dropout(0.4),\n","        Dense(128, activation='relu'),\n","        BatchNormalization(),\n","        Dropout(0.3),\n","        Dense(64, activation='relu'),\n","        Dense(1)  # Çıkış tek bir değerse regresyon varsayıyoruz\n","    ])\n","    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n","    return model\n","\n","# Kullanıcı girdilerini alma ve veri setini oluşturma döngüsü\n","while True:\n","    user_input = get_user_input_dynamically(columns, target_column)\n","    user_df = pd.DataFrame([user_input], columns=columns + [target_column])  # Yeni girdiyi DataFrame'e çevir\n","    data = pd.concat([data, user_df], ignore_index=True)  # Yeni girdiyi veri setine ekle\n","    print(\"\\nVeri seti güncellendi.\")\n","    print(data.tail())  # Son eklenen veriyi göster\n","\n","    # Eğer veri seti en az birkaç örneğe ulaştıysa modeli eğit\n","    if len(data) >= 5:  # Minimum veri sayısı\n","        X = data[columns]\n","        y = data[target_column]\n","\n","        # Veriyi normalize et\n","        scaler = StandardScaler()\n","        X_scaled = scaler.fit_transform(X)\n","\n","        # Modeli eğit\n","        model = create_model(X_scaled.shape[1])\n","        early_stopping = EarlyStopping(monitor='loss', patience=3, restore_best_weights=True)\n","        model.fit(X_scaled, y, epochs=10, batch_size=4, callbacks=[early_stopping], verbose=1)\n","\n","        # Tahmin yap\n","        while True:\n","            decision = input(\"\\nYeni bir tahmin yapmak ister misiniz? (Evet/Hayır): \").strip().lower()\n","            if decision == \"evet\":\n","                prediction_input = get_user_input_dynamically(columns, target_column)\n","                prediction_df = pd.DataFrame([prediction_input], columns=columns + [target_column])\n","                prediction_X = scaler.transform(prediction_df[columns])\n","                prediction = model.predict(prediction_X)\n","                print(f\"\\nTahmin edilen {target_column}: {prediction[0][0]:.2f}\")\n","            else:\n","                print(\"Çıkılıyor...\")\n","                break\n"]}]}